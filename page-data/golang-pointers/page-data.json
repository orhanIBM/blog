{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/golang-pointers/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Orhan's Blog"}},"markdownRemark":{"id":"f37b29a2-cd14-58e5-a7a4-0710071de877","excerpt":"Pointers allow sharing the data across the program, instead of copying values around. But its benefits come with a cost. Let’s take a look at the a basic…","html":"<p>Pointers allow sharing the data across the program, instead of copying values around. But its benefits come with a cost.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// golang</span>\n<span class=\"token keyword\">package</span> main<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// this is the value of p, which is the memory address of count</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// this is where the p is stored in memory; showing that p (memory address) is just another data stored in memory</span>\n    <span class=\"token comment\">// note: if you dereference it as *&amp;p, it will be equal to p</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s take a look at the a basic increment operation.\nIn the example above, our main function initializes a count variable with value zero.\nThen passes the memory location of the count variable to the increment function and prints the value of the count.</p>\n<p>The increment function takes an input p (meant to be short for pointer) as the memory location.\nNote that the star or asterisk is in front of int, not the input p.\nThis means the input “p” is a memory address (pointer).</p>\n<p>One can say, if the asterisk denotes the memory location, then why don’t you just use *, why do you add int after?\nBecause we need to know what type of data is at that memory location that we can read/write(manipulate) it.\nOtherwise, a developer can try to increment a string. For type safety reasons we add the data type at the memory location referenced.</p>\n<p>Inside the increment function, this time the dereferencing (the asterisk character) is in front of p;\nMeaning that the asterisk will convert the memory address to the value at that address, and then increment it.\nIn plain English, it means the value at the address p.</p>\n<p>The cost, however, is that we will start mutating the memory, outside of the active frame.\nIf we are not careful, (such as in a multi-threaded programming), the program may update the value behind the scene and we wouldn’t even be aware of it.</p>","frontmatter":{"title":"Pointers in Go","date":"October 25, 2022","description":"Pointers in golang"}},"previous":{"fields":{"slug":"/aws-saa/"},"frontmatter":{"title":"AWS Solutions Architect Associate"}},"next":null},"pageContext":{"id":"f37b29a2-cd14-58e5-a7a4-0710071de877","previousPostId":"206914c8-b649-547e-8713-bff68d8866d7","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}